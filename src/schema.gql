# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Permission {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  users: [AuthActions!]!
  order: [AuthActions!]!
  collection: [AuthActions!]!
  people: [AuthActions!]!
  role: [AuthActions!]!
  product: [AuthActions!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum AuthActions {
  CREATE
  UPDATE
  VIEW
  DELETE
}

type Channel {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: String!
  token: String!
  defaultLanguageCode: LanguageCode!
  currencyCode: CurrencyCode!
  pricesIncludeTax: Boolean!
}

enum LanguageCode {
  af
  ak
  sq
  am
  ar
  hy
  as
  az
  bm
  bn
  eu
  be
  bs
  br
  bg
  my
  ca
  ce
  zh
  zh_Hans
  zh_Hant
  cu
  kw
  co
  hr
  cs
  da
  nl
  nl_BE
  dz
  en
  en_AU
  en_CA
  en_GB
  en_US
  eo
  et
  ee
  fo
  fi
  fr
  fr_CA
  fr_CH
  ff
  gl
  lg
  ka
  de
  de_AT
  de_CH
  el
  gu
  ht
  ha
  he
  hi
  hu
  is
  ig
  id
  ia
  ga
  it
  ja
  jv
  kl
  kn
  ks
  kk
  km
  ki
  rw
  ko
  ku
  ky
  lo
  la
  lv
  ln
  lt
  lu
  lb
  mk
  mg
  ms
  ml
  mt
  gv
  mi
  mr
  mn
  ne
  nd
  se
  nb
  nn
  ny
  or
  om
  os
  ps
  fa
  fa_AF
  pl
  pt
  pt_BR
  pt_PT
  pa
  qu
  ro
  ro_MD
  rm
  rn
  ru
  sm
  sg
  sa
  gd
  sr
  sn
  ii
  sd
  si
  sk
  sl
  so
  st
  es
  es_ES
  es_MX
  su
  sw
  sw_CD
  sv
  tg
  ta
  tt
  te
  th
  bo
  ti
  to
  tr
  tk
  uk
  ur
  ug
  uz
  vi
  vo
  cy
  fy
  wo
  xh
  yi
  yo
  zu
}

enum CurrencyCode {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHF
  CLP
  CNY
  COP
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRU
  MUR
  MVR
  MWK
  MXN
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  SSP
  STN
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  UYU
  UZS
  VES
  VND
  VUV
  WST
  XAF
  XCD
  XOF
  XPF
  YER
  ZAR
  ZMW
  ZWL
}

type Role {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  permissions: Permission
  code: String!
  name: String!
  description: String!
  channels: [Channel!]!
}

type User {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  role: Role!
  verified: Boolean!
}

type Person {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  emailAddress: String!
  user: User
  addresses: [Address!]
  companyName: String!
  taxNumber: String!
}

type Country {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: String!
  enabled: String!
}

type Address {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  person: Person!
  fullName: String!
  company: String!
  streetLine1: String!
  streetLine2: String!
  city: String!
  province: String!
  postalCode: String!
  country: Country!
  phoneNumber: String!
  defaultShippingAddress: Boolean!
  defaultBillingAddress: Boolean!
}

type Asset {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  type: AssetType!
  mimeType: String!
  width: Float!
  height: Float!
  fileSize: Float!
  source: String!
  preview: String!
}

enum AssetType {
  IMAGE
  VIDEO
  BINARY
}

type ProductVariantAsset {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  assetId: Float!
  asset: Asset!
  position: Float!
  productVariantId: Float!
  productVariant: ProductVariant!
}

type ProductVariantPrice {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  price: Float!
  channelId: Float!
  variant: ProductVariant!
}

type ProductAsset {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  assetId: Float!
  asset: Asset!
  position: Float!
  productId: Float!
  product: Product!
}

type Facet {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  isPrivate: Boolean!
  code: String!
  values: [FacetValue!]
}

type FacetValue {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: String!
  facet: Facet!
}

type Product {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  description: String!
  enabled: Boolean!
  featuredAsset: Asset
  assets: [ProductAsset!]
  variants: [ProductVariant!]
  facetValues: [FacetValue!]
  channels: [Channel!]
}

type StockMovement {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  productVariant: ProductVariant!
  quantity: Float!
  type: StockMovementType!
}

enum StockMovementType {
  ADJUSTMENT
  ALLOCATION
  CANCELLATION
  PURCHASE
  RELEASE
  RETURN
  SALE
}

type ProductVariant {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  barcode: Float!
  name: String!
  enabled: Boolean!
  listPrice: Float!
  listPriceIncludesTax: Boolean!
  currencyCode: CurrencyCode!
  featuredAsset: Asset!
  assets: [ProductVariantAsset!]
  productVariantPrices: [ProductVariantPrice!]!
  product: Product!
  productId: Float!
  stockOnHand: Float!
  stockAllocated: Float!
  outOfStockThreshold: Float!
  useGlobalOutOfStockThreshold: Boolean!
  trackInventory: GlobalFlag!
  stockMovements: [StockMovement!]
  facetValues: [FacetValue!]
  collections: [Collection!]
  channels: [Channel!]!
  deletedAt: DateTime!
}

enum GlobalFlag {
  TRUE
  FALSE
  INHERIT
}

type Collection {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  isRoot: Boolean!
  position: Float!
  isPrivate: Boolean!
  name: String!
  description: String!
  slug: String!
  featuredAsset: Asset!
  assets: [CollectionAsset!]!
  productVariants: [ProductVariant!]!
  parent: Collection
  channels: [Channel!]!
  children: [Collection!]!
}

type CollectionAsset {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  assetId: Float!
  asset: Asset!
  position: Float!
  collectionId: Float!
  collection: Collection!
}

type TaxCategory {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type OrderLine {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  sku: String!
  productVariant: ProductVariant!
  taxCategory: TaxCategory!
  featuredAsset: Asset!
  order: Order!
  quantity: Float!
  received: Float!
  discount: Float!
  tax: Float!
  cost: Float!
  total: Float!
}

type Fulfillment {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  state: String!
  trackingCode: String!
  method: String!
  handlerCode: String!
  orderItems: [OrderItem!]!
}

type OrderItem {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  adjustments: JSON!
  taxLines: JSON!
  fulfillments: [Fulfillment!]!
  listPrice: Float!
  listPriceIncludesTax: Boolean!
  refund: Refund!
  refundId: Float!
  cancelled: Boolean!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Refund {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  items: Float!
  shipping: Float!
  adjustment: Float!
  total: Float!
  method: String!
  reason: String!
  state: RefundState!
  transactionId: String!
  orderItems: [OrderItem!]!
  payment: Payment!
  paymentId: Float!
  metadata: String!
}

enum RefundState {
  SETTLED
  PENDING
  FAILED
}

type Payment {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  method: String!
  amount: Float!
  state: String!
  errorMessage: String!
  transactionId: String!
  order: Order!
  refunds: [Refund!]!
}

type Surcharge {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  taxLines: JSON!
  description: String!
  listPrice: Float!
  listPriceIncludesTax: Boolean!
  sku: String!
  order: Order!
  orderModification: OrderModification!
}

type OrderModification {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  note: String!
  order: Order!
  shippingAddressChange: JSON!
  billingAddressChange: JSON!
  orderItems: [OrderItem!]!
  surcharges: [Surcharge!]!
  priceChange: Float!
  payment: Payment
  refund: Refund
}

type ShippingMethod {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  code: String!
  name: String!
  description: String!
  shippingLines: [ShippingLine!]!
  fulfillmentHandlerCode: String!
  channels: [Channel!]!
}

type ShippingLine {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  adjustments: JSON!
  taxLines: JSON!
  shippingMethodId: Float!
  shippingMethod: ShippingMethod!
  order: Order!
  listPrice: Float!
  listPriceIncludesTax: Boolean!
}

type Order {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: String!
  state: OrderState!
  active: Boolean!
  orderPlacedAt: DateTime
  totalCost: Float!
  totalTax: Float!
  totalQuantity: Float!
  totalDiscount: Float!
  user: User!
  lines: OrderLine
  shippingAddress: Address!
  billingAddress: Address!
  payments: Payment
  currencyCode: CurrencyCode!
  taxZoneId: Float
  channels: [Channel!]!
  modifications: OrderModification
  shippingLines: ShippingLine
  shipping: Float!
  shippingWithTax: Float!
}

enum OrderState {
  CREATED
  ADDINGITEMS
  ARRANGINGPAYMENT
  PAYMENTSETTLED
  PARTIALLYSHIPPED
  PAYMENTAUTHORIZED
  SHIPPED
  PARTIALLYDELIVERED
  DELIVERED
  MODIFYING
  ARRANGINGADDITIONALPAYMENT
  CANCELLED
}

type Promotion {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  startsAt: DateTime!
  endsAt: DateTime!
  couponCode: String!
  perCustomerUsageLimit: Float!
  name: String!
  enabled: Boolean!
  channels: [Channel!]!
}

type Department {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  employees: [Employee!]!
}

type Employee {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  profile: Person!
  department: Department!
}

type Store {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  address: Address!
  manager: Employee!
}

type Sale {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  order: Order!
  couponCodes: [String!]
  customer: Customer!
  promotions: Promotion
  fromStore: Store!
  surcharges: Surcharge
  biller: Employee!
}

type Customer {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  person: Person
  groups: [CustomerGroup!]
  sales: [Sale!]
  channels: [Channel!]!
}

type CustomerGroup {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  customers: [Customer!]
}

type Supplier {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  VATNumber: Float!
  person: Person
  productVariants: [ProductVariant!]!
  purchases: [Purchase!]!
}

type Purchase {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  order: Order!
  toStore: Store!
  supplier: Supplier!
}

type StockAdjustment {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  productVariant: ProductVariant!
  quantity: Float!
  type: StockMovementType!
  note: String!
}

type StoreStockLevel {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  store: Store!
  quantity: Float!
  variant: ProductVariant!
}

type Zone {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  members: [Country!]!
}

type CreateCountryOutput {
  error: String
  ok: Boolean!
}

type DeleteCountryOutput {
  error: String
  ok: Boolean!
}

type EditCountryOutput {
  error: String
  ok: Boolean!
}

type AllCountryOutput {
  error: String
  ok: Boolean!
  countries: [Country!]
}

type FindCountryOutput {
  error: String
  ok: Boolean!
  country: Country!
}

type CreateAddressOutput {
  error: String
  ok: Boolean!
}

type DeleteAddressOutput {
  error: String
  ok: Boolean!
}

type EditAddressOutput {
  error: String
  ok: Boolean!
}

type FindAddressOutput {
  error: String
  ok: Boolean!
  address: Address!
}

type AllAddressOutput {
  error: String
  ok: Boolean!
  addresses: [Address!]
}

type CreateAssetOutput {
  error: String
  ok: Boolean!
}

type DeleteAssetOutput {
  error: String
  ok: Boolean!
}

type EditAssetOutput {
  error: String
  ok: Boolean!
}

type FindAssetOutput {
  error: String
  ok: Boolean!
  asset: Asset!
}

type MultipleUploadAssetOutput {
  error: String
  ok: Boolean!
}

type SingleUploadAssetOutput {
  error: String
  ok: Boolean!
}

type AllChannelOutput {
  error: String
  ok: Boolean!
  channels: [Channel!]
}

type CreateChannelOutput {
  error: String
  ok: Boolean!
}

type DeleteChannelOutput {
  error: String
  ok: Boolean!
}

type EditChannelOutput {
  error: String
  ok: Boolean!
}

type FindChannelOutput {
  error: String
  ok: Boolean!
  channel: Channel!
}

type AllCollectionOutput {
  error: String
  ok: Boolean!
  collections: [Collection!]
}

type CreateCollectionAssetOutput {
  error: String
  ok: Boolean!
}

type CreateCollectionOutput {
  error: String
  ok: Boolean!
}

type DeleteCollectionOutput {
  error: String
  ok: Boolean!
}

type DeleteCollectionAssetOutput {
  error: String
  ok: Boolean!
}

type EditCollectionAssetOutput {
  error: String
  ok: Boolean!
}

type EditCollectionOutput {
  error: String
  ok: Boolean!
}

type CreateCustomerGroupOutput {
  error: String
  ok: Boolean!
}

type CreateCustomerOutput {
  error: String
  ok: Boolean!
}

type DeleteCustomerGroupOutput {
  error: String
  ok: Boolean!
}

type DeleteCustomerOutput {
  error: String
  ok: Boolean!
}

type EditCustomerGroupOutput {
  error: String
  ok: Boolean!
}

type EditCustomerOutput {
  error: String
  ok: Boolean!
}

type AllCustomerGroupOutput {
  error: String
  ok: Boolean!
  customerGroups: [CustomerGroup!]
}

type AllCustomerOutput {
  error: String
  ok: Boolean!
  customers: [Customer!]
}

type FindCustomerGroupOutput {
  error: String
  ok: Boolean!
  customerGroup: CustomerGroup
}

type FindCustomerOutput {
  error: String
  ok: Boolean!
  customer: Customer!
}

type AllPersonOutput {
  error: String
  ok: Boolean!
  people: [Person!]
}

type CreatePersonOutput {
  error: String
  ok: Boolean!
  person: Person!
}

type DeletePersonOutput {
  error: String
  ok: Boolean!
}

type EditPersonOutput {
  error: String
  ok: Boolean!
}

type FindPersonOutput {
  error: String
  ok: Boolean!
  person: Person!
}

type CreateDepartmentOutput {
  error: String
  ok: Boolean!
}

type CreateEmployeeOutput {
  error: String
  ok: Boolean!
}

type DeleteDepartmentOutput {
  error: String
  ok: Boolean!
}

type DeleteEmployeeOutput {
  error: String
  ok: Boolean!
}

type EditDepartmentOutput {
  error: String
  ok: Boolean!
}

type EditEmployeeOutput {
  error: String
  ok: Boolean!
}

type AllDepartmentOutput {
  error: String
  ok: Boolean!
  departments: [Department!]
}

type AllEmployeeOutput {
  error: String
  ok: Boolean!
  employees: [Employee!]
}

type FindDepartmentOutput {
  error: String
  ok: Boolean!
  department: Department!
}

type FindEmployeeOutput {
  error: String
  ok: Boolean!
  employee: Employee!
}

type AllFacetOutput {
  error: String
  ok: Boolean!
  facets: [Facet!]
}

type CreateFacetValueOutput {
  error: String
  ok: Boolean!
}

type CreateFacetOutput {
  error: String
  ok: Boolean!
}

type DeleteFacetValueOutput {
  error: String
  ok: Boolean!
}

type DeleteFacetOutput {
  error: String
  ok: Boolean!
}

type EditFacetValueOutput {
  error: String
  ok: Boolean!
}

type EditFacetOutput {
  error: String
  ok: Boolean!
}

type CreateAccountOutput {
  error: String
  ok: Boolean!
}

type EditProfileOutput {
  error: String
  ok: Boolean!
}

type LoginOutput {
  error: String
  ok: Boolean!
  token: String
}

type UserProfileOutput {
  error: String
  ok: Boolean!
  user: User
}

type VerifyEmailOutput {
  error: String
  ok: Boolean!
}

type AllRoleOutput {
  error: String
  ok: Boolean!
  roles: [Role!]
}

type CreatePermissionOutput {
  error: String
  ok: Boolean!
}

type CreateRoleOutput {
  error: String
  ok: Boolean!
}

type DeleteRoleOutput {
  error: String
  ok: Boolean!
}

type EditPermissionOutput {
  error: String
  ok: Boolean!
}

type EditRoleOutput {
  error: String
  ok: Boolean!
}

type FindRoleOutput {
  error: String
  ok: Boolean!
  role: Role!
}

type CreateProductAssetOutput {
  error: String
  ok: Boolean!
}

type CreateProductVariantAssetOutput {
  error: String
  ok: Boolean!
}

type CreateProductVariantPriceOutput {
  error: String
  ok: Boolean!
}

type CreateProductVariantOutput {
  error: String
  ok: Boolean!
}

type CreateProductOutput {
  error: String
  ok: Boolean!
}

type DeleteProductAssetOutput {
  error: String
  ok: Boolean!
}

type DeleteProductVariantAssetOutput {
  error: String
  ok: Boolean!
}

type DeleteProductVariantPriceOutput {
  error: String
  ok: Boolean!
}

type DeleteProductVariantOutput {
  error: String
  ok: Boolean!
}

type DeleteProductOutput {
  error: String
  ok: Boolean!
}

type EditProductAssetOutput {
  error: String
  ok: Boolean!
}

type EditProductVariantAssetOutput {
  error: String
  ok: Boolean!
}

type EditProductVariantPriceOutput {
  error: String
  ok: Boolean!
}

type EditProductVariantOutput {
  error: String
  ok: Boolean!
}

type EditProductOutput {
  error: String
  ok: Boolean!
}

type AllProductVariantOutput {
  error: String
  ok: Boolean!
  productVariants: [ProductVariant!]
}

type FindProductOutput {
  error: String
  ok: Boolean!
  product: Product
}

type CreateStockAdjustmentOutput {
  error: String
  ok: Boolean!
}

type DeleteStockAdjustmentOutput {
  error: String
  ok: Boolean!
}

type EditStockAdjustmentOutput {
  error: String
  ok: Boolean!
}

type FindStockAdjustmentOutput {
  error: String
  ok: Boolean!
  stockAdjustment: StockAdjustment
}

type CreateStoreStockLevelOutput {
  error: String
  ok: Boolean!
}

type CreateStoreOutput {
  error: String
  ok: Boolean!
}

type DeleteStoreStockLevelOutput {
  error: String
  ok: Boolean!
}

type DeleteStoreOutput {
  error: String
  ok: Boolean!
}

type EditStoreStockLevelOutput {
  error: String
  ok: Boolean!
}

type EditStoreOutput {
  error: String
  ok: Boolean!
}

type AllStoreStockLevelOutput {
  error: String
  ok: Boolean!
  storeStockLevels: [StoreStockLevel!]
}

type AllStoreOutput {
  error: String
  ok: Boolean!
  stores: [Store!]
}

type FindStoreStockLevelOutput {
  error: String
  ok: Boolean!
  storeStockLevel: StoreStockLevel!
}

type FindStoreOutput {
  error: String
  ok: Boolean!
  store: Store!
}

type CreateSupplierOutput {
  error: String
  ok: Boolean!
}

type DeleteSupplierOutput {
  error: String
  ok: Boolean!
}

type EditSupplierOutput {
  error: String
  ok: Boolean!
}

type AllSupplierOutput {
  error: String
  ok: Boolean!
  suppliers: [Supplier!]
}

type FindSupplierOutput {
  error: String
  ok: Boolean!
  supplier: Supplier!
}

input CountryInputType {
  code: String!
  enabled: String!
}

input AdressInputType {
  person: PersonInputType!
  fullName: String!
  company: String!
  streetLine1: String!
  streetLine2: String!
  city: String!
  province: String!
  postalCode: String!
  country: CountryInputType!
  phoneNumber: String!
  defaultShippingAddress: Boolean!
  defaultBillingAddress: Boolean!
}

input PersonInputType {
  title: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  emailAddress: String!
  user: UserInputType
  addresses: [AdressInputType!]
  companyName: String!
  taxNumber: String!
}

input UserInputType {
  email: String!
  password: String!
  role: RoleInputType!
  verified: Boolean!
}

input RoleInputType {
  permissions: PermissionInputType
  code: String!
  name: String!
  description: String!
  channels: [ChannelInputType!]!
}

input PermissionInputType {
  users: [AuthActions!]!
  order: [AuthActions!]!
  collection: [AuthActions!]!
  people: [AuthActions!]!
  role: [AuthActions!]!
  product: [AuthActions!]!
}

input ChannelInputType {
  name: String!
  code: String!
  token: String!
  defaultLanguageCode: LanguageCode!
  currencyCode: CurrencyCode!
  pricesIncludeTax: Boolean!
}

type Query {
  findAsset(assetId: Float!): FindAssetOutput!
  allCollection: AllCollectionOutput!
  allChannels: AllChannelOutput!
  findChannel(channelId: Float!): FindChannelOutput!
  allPersons: AllPersonOutput!
  findPerson(personId: Float!): FindPersonOutput!
  allFacets: AllFacetOutput!
  me: User!
  userProfile(userId: Float!): UserProfileOutput!
  findRole(roleId: Float!): FindRoleOutput!
  allRoles: AllRoleOutput!
  findProduct(productId: Float!): FindProductOutput!
  findAllProductVariant: AllProductVariantOutput!
  findStockAdjustment(stockAdjustmentId: Float!): FindStockAdjustmentOutput!
  findEmployee(employeeId: Float!): FindEmployeeOutput!
  findAllEmployee: AllEmployeeOutput!
  findDepartment(departmentId: Float!): FindDepartmentOutput!
  findAllDepartment: AllDepartmentOutput!
}

type Mutation {
  createAddress(input: CreateAddressInput!): CreateAddressOutput!
  editAddress(input: EditAddressInput!): EditAddressOutput!
  deleteAddress(addressId: Float!): DeleteAddressOutput!
  findAddress(addressId: Float!): FindAddressOutput!
  findAllAddress: AllAddressOutput!
  createCountry(input: CreateCountryInput!): CreateCountryOutput!
  editCountry(input: EditCountryInput!): EditCountryOutput!
  deleteCountry(countryId: Float!): DeleteCountryOutput!
  findCountry(countryId: Float!): FindCountryOutput!
  findAllCountry: AllCountryOutput!
  createAsset(input: CreateAssetInput!): CreateAssetOutput!
  editAsset(input: EditAssetInput!): EditAssetOutput!
  deleteAsset(assetId: Float!): DeleteAssetOutput!
  singleAssetUpload(input: SingleUploadAssetInput!): SingleUploadAssetOutput!
  multipleAssetUpload(input: MultipleUploadAssetInput!): MultipleUploadAssetOutput!
  createCollection(input: CreateCollectionInput!): CreateCollectionOutput!
  editCollection(input: EditCollectionInput!): EditCollectionOutput!
  deleteCollection(collectionId: Float!): DeleteCollectionOutput!
  createCollectionAsset(input: CreateCollectionAssetInput!): CreateCollectionAssetOutput!
  editCollectionAsset(input: EditCollectionAssetInput!): EditCollectionAssetOutput!
  deleteCollectionAsset(collectionAssetId: Float!): DeleteCollectionAssetOutput!
  createChannel(input: CreateChannelInput!): CreateChannelOutput!
  editChannel(input: EditChannelInput!): EditChannelOutput!
  deleteChannel(channelId: Float!): DeleteChannelOutput!
  createCustomer(input: CreateCustomerInput!): CreateCustomerOutput!
  editCustomer(input: EditCustomerInput!): EditCustomerOutput!
  deleteCustomer(customerId: Float!): DeleteCustomerOutput!
  findCustomer(customerId: Float!): FindCustomerOutput!
  findAllCustomer: AllCustomerOutput!
  createGroupCustomer(input: CreateCustomerGroupInput!): CreateCustomerGroupOutput!
  editCustomerGroup(input: EditCustomerGroupInput!): EditCustomerGroupOutput!
  deleteCustomerGroup(customerGroupId: Float!): DeleteCustomerGroupOutput!
  findCustomerGroup(customerGroupId: Float!): FindCustomerGroupOutput!
  findAllCustomerGroup: AllCustomerGroupOutput!
  createPerson(input: CreatePersonInput!): CreatePersonOutput!
  editPerson(input: EditPersonInput!): EditPersonOutput!
  deletePerson(personId: Float!): DeletePersonOutput!
  createFacet(input: CreateFacetInput!): CreateFacetOutput!
  editFacet(input: EditFacetInput!): EditFacetOutput!
  deleteFacet(facetId: Float!): DeleteFacetOutput!
  createFacetValue(input: CreateFacetValueInput!): CreateFacetValueOutput!
  editFacetValue(input: EditFacetValueInput!): EditFacetValueOutput!
  deleteFacetValue(facetId: Float!, facetValueId: Float!): DeleteFacetValueOutput!
  createAccount(input: CreateAccountInput!): CreateAccountOutput!
  login(input: LoginInput!): LoginOutput!
  editProfile(input: EditProfileInput!): EditProfileOutput!
  verifyEmail(input: VerifyEmailInput!): VerifyEmailOutput!
  createRole(input: CreateRoleInput!): CreateRoleOutput!
  editRole(input: EditRoleInput!): EditRoleOutput!
  deleteRole(roleId: Float!): DeleteRoleOutput!
  createPermission(input: CreatePermissionInput!): CreatePermissionOutput!
  editPermission(input: EditPermissionInput!): EditPermissionOutput!
  createProduct(input: CreateProductInput!): CreateProductOutput!
  editProduct(input: EditProductInput!): EditProductOutput!
  deleteProduct(productId: Float!): DeleteProductOutput!
  createProductAsset(input: CreateProductAssetInput!): CreateProductAssetOutput!
  editProductAsset(input: EditProductAssetInput!): EditProductAssetOutput!
  deleteProductAsset(productAssetId: Float!): DeleteProductAssetOutput!
  createProductVariantAsset(input: CreateProductVariantAssetInput!): CreateProductVariantAssetOutput!
  editProductVariantAsset(input: EditProductVariantAssetInput!): EditProductVariantAssetOutput!
  deleteProductVariantAsset(productVariantAssetId: Float!): DeleteProductVariantAssetOutput!
  createProductVariantPrice(input: CreateProductVariantPriceInput!): CreateProductVariantPriceOutput!
  editProductVariantPrice(input: EditProductVariantPriceInput!): EditProductVariantPriceOutput!
  deleteProductVariantPrice(productVariantPriceId: Float!): DeleteProductVariantPriceOutput!
  createProductVariant(input: CreateProductVariantInput!): CreateProductVariantOutput!
  editProductVariant(input: EditProductVariantInput!): EditProductVariantOutput!
  deleteProductVariant(productVariantId: Float!): DeleteProductVariantOutput!
  createStockAdjustment(input: CreateStockAdjustmentInput!): CreateStockAdjustmentOutput!
  editStockAdjustment(input: EditStockAdjustmentInput!): EditStockAdjustmentOutput!
  deleteStockAdjustment(stockAdjustmentId: Float!): DeleteStockAdjustmentOutput!
  createStore(input: CreateStoreInput!): CreateStoreOutput!
  editStore(input: EditStoreInput!): EditStoreOutput!
  deleteStore(storeId: Float!): DeleteStoreOutput!
  findStore(storeId: Float!): FindStoreOutput!
  findAllStore: AllStoreOutput!
  createGroupStore(input: CreateStoreStockLevelInput!): CreateStoreStockLevelOutput!
  editStoreStockLevel(input: EditStoreStockLevelInput!): EditStoreStockLevelOutput!
  deleteStoreStockLevel(storeStockLevelId: Float!): DeleteStoreStockLevelOutput!
  findStoreStockLevel(storeStockLevelId: Float!): FindStoreStockLevelOutput!
  findAllStoreStockLevel: AllStoreStockLevelOutput!
  createEmployee(input: CreateEmployeeInput!): CreateEmployeeOutput!
  editEmployee(input: EditEmployeeInput!): EditEmployeeOutput!
  deleteEmployee(employeeId: Float!): DeleteEmployeeOutput!
  createGroupEmployee(input: CreateDepartmentInput!): CreateDepartmentOutput!
  editDepartment(input: EditDepartmentInput!): EditDepartmentOutput!
  deleteDepartment(departmentId: Float!): DeleteDepartmentOutput!
  createSupplier(input: CreateSupplierInput!): CreateSupplierOutput!
  editSupplier(input: EditSupplierInput!): EditSupplierOutput!
  deleteSupplier(supplierId: Float!): DeleteSupplierOutput!
  findSupplier(supplierId: Float!): FindSupplierOutput!
  findAllSupplier: AllSupplierOutput!
}

input CreateAddressInput {
  person: PersonInputType!
  fullName: String!
  company: String!
  streetLine1: String!
  streetLine2: String!
  city: String!
  province: String!
  postalCode: String!
  country: CountryInputType!
  phoneNumber: String!
  defaultShippingAddress: Boolean!
  defaultBillingAddress: Boolean!
  countryId: Float!
}

input EditAddressInput {
  person: PersonInputType
  fullName: String
  company: String
  streetLine1: String
  streetLine2: String
  city: String
  province: String
  postalCode: String
  phoneNumber: String
  defaultShippingAddress: Boolean
  defaultBillingAddress: Boolean
  addressId: Float!
  countryId: Float!
}

input CreateCountryInput {
  code: String!
  enabled: String!
}

input EditCountryInput {
  code: String
  enabled: String
  countryId: Float!
}

input CreateAssetInput {
  name: String!
  type: AssetType!
  mimeType: String!
  width: Float!
  height: Float!
  fileSize: Float!
  source: String!
  preview: String!
}

input EditAssetInput {
  name: String
  assetId: Float!
}

input SingleUploadAssetInput {
  file: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input MultipleUploadAssetInput {
  files: [Upload!]!
}

input CreateCollectionInput {
  isRoot: Boolean!
  position: Float!
  isPrivate: Boolean!
  name: String!
  description: String!
  slug: String!
  parentId: Float!
  featuredAssetId: Float!
}

input EditCollectionInput {
  isRoot: Boolean
  position: Float
  isPrivate: Boolean
  name: String
  description: String
  slug: String
  parentId: Float!
  featuredAssetId: Float!
  collectionId: Float!
}

input CreateCollectionAssetInput {
  assetId: Float!
  asset: AssetInputType!
  position: Float!
  collectionId: Float!
  collection: CollectionInputType!
}

input AssetInputType {
  name: String!
  type: AssetType!
  mimeType: String!
  width: Float!
  height: Float!
  fileSize: Float!
  source: String!
  preview: String!
}

input CollectionInputType {
  isRoot: Boolean!
  position: Float!
  isPrivate: Boolean!
  name: String!
  description: String!
  slug: String!
  featuredAsset: AssetInputType!
  assets: [CollectionAssetInputType!]!
  productVariants: [ProductVariantInputType!]!
  parent: CollectionInputType
  channels: [ChannelInputType!]!
  children: [CollectionInputType!]!
}

input CollectionAssetInputType {
  collectionId: Float!
  collection: CollectionInputType!
}

input ProductVariantInputType {
  barcode: Float!
  name: String!
  enabled: Boolean!
  listPrice: Float!
  listPriceIncludesTax: Boolean!
  currencyCode: CurrencyCode!
  featuredAsset: AssetInputType!
  assets: [ProductVariantAssetInputType!]
  productVariantPrices: [ProductVariantPriceInputType!]!
  product: ProductInputType!
  productId: Float!
  stockOnHand: Float!
  stockAllocated: Float!
  outOfStockThreshold: Float!
  useGlobalOutOfStockThreshold: Boolean!
  trackInventory: GlobalFlag!
  stockMovements: [StockMovementInputType!]
  facetValues: [FacetValueInputType!]
  collections: [CollectionInputType!]
  channels: [ChannelInputType!]!
  deletedAt: DateTime!
}

input ProductVariantAssetInputType {
  productVariantId: Float!
  productVariant: ProductVariantInputType!
}

input ProductVariantPriceInputType {
  price: Float!
  channelId: Float!
  variant: ProductVariantInputType!
}

input ProductInputType {
  name: String!
  slug: String!
  description: String!
  enabled: Boolean!
  featuredAsset: AssetInputType
  assets: [ProductAssetInputType!]
  variants: [ProductVariantInputType!]
  facetValues: [FacetValueInputType!]
  channels: [ChannelInputType!]
}

input ProductAssetInputType {
  productId: Float!
  product: ProductInputType!
}

input FacetValueInputType {
  name: String!
  code: String!
  facet: FacetInputType!
}

input FacetInputType {
  name: String!
  isPrivate: Boolean!
  code: String!
  values: [FacetValueInputType!]
}

input StockMovementInputType {
  productVariant: ProductVariantInputType!
  quantity: Float!
  type: StockMovementType!
}

input EditCollectionAssetInput {
  assetId: Float
  asset: AssetInputType
  position: Float
  collectionId: Float
  collection: CollectionInputType
  collectionAssetId: Float!
}

input CreateChannelInput {
  name: String!
  code: String!
  defaultLanguageCode: LanguageCode!
  currencyCode: CurrencyCode!
  pricesIncludeTax: Boolean!
}

input EditChannelInput {
  name: String
  code: String
  defaultLanguageCode: LanguageCode
  currencyCode: CurrencyCode
  pricesIncludeTax: Boolean
  channelId: Float!
}

input CreateCustomerInput {
  deletedAt: DateTime!
  person: PersonInputType
  channels: [ChannelInputType!]!
  channelId: Float!
  personId: Float!
}

input EditCustomerInput {
  deletedAt: DateTime
  channels: [ChannelInputType!]
  customerId: Float!
  channelId: Float!
}

input CreateCustomerGroupInput {
  name: String!
  customers: [CustomerInputType!]
}

input CustomerInputType {
  deletedAt: DateTime!
  person: PersonInputType
  groups: [CustomerGroupInputType!]
  sales: [SaleInputType!]
  channels: [ChannelInputType!]!
}

input CustomerGroupInputType {
  name: String!
  customers: [CustomerInputType!]
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SaleInputType {
  order: OrderInputType!
  couponCodes: [String!]
  customer: CustomerInputType!
  promotions: PromotionInputType
  fromStore: StoreInputType!
  surcharges: SurchargeInputType
  biller: EmployeeInputType!
}

input OrderInputType {
  code: String!
  state: OrderState!
  active: Boolean!
  orderPlacedAt: DateTime
  totalCost: Float!
  totalTax: Float!
  totalQuantity: Float!
  totalDiscount: Float!
  user: UserInputType!
  lines: OrderLineInputType
  shippingAddress: AdressInputType!
  billingAddress: AdressInputType!
  payments: PaymentInputType
  currencyCode: CurrencyCode!
  taxZoneId: Float
  channels: [ChannelInputType!]!
  modifications: OrderModificationInputType
  shippingLines: ShippingLineInputType
  shipping: Float!
  shippingWithTax: Float!
}

input OrderLineInputType {
  sku: String!
  productVariant: ProductVariantInputType!
  taxCategory: TaxCategoryInputTyoe!
  featuredAsset: AssetInputType!
  order: OrderInputType!
  quantity: Float!
  received: Float!
  discount: Float!
  tax: Float!
  cost: Float!
  total: Float!
}

input TaxCategoryInputTyoe {
  name: String!
}

input PaymentInputType {
  method: String!
  amount: Float!
  state: String!
  errorMessage: String!
  transactionId: String!
  order: OrderInputType!
  refunds: [RefundInputType!]!
}

input RefundInputType {
  items: Float!
  shipping: Float!
  adjustment: Float!
  total: Float!
  method: String!
  reason: String!
  state: RefundState!
  transactionId: String!
  orderItems: [OrderItemInput!]!
  payment: PaymentInputType!
  paymentId: Float!
  metadata: String!
}

input OrderItemInput {
  adjustments: JSON!
  taxLines: JSON!
  fulfillments: [FullfilmentInputType!]!
  listPrice: Float!
  listPriceIncludesTax: Boolean!
  refund: RefundInputType!
  refundId: Float!
  cancelled: Boolean!
}

input FullfilmentInputType {
  state: String!
  trackingCode: String!
  method: String!
  handlerCode: String!
  orderItems: [OrderItemInput!]!
}

input OrderModificationInputType {
  note: String!
  order: OrderInputType!
  shippingAddressChange: JSON!
  billingAddressChange: JSON!
  orderItems: [OrderItemInput!]!
  surcharges: [SurchargeInputType!]!
  priceChange: Float!
  payment: PaymentInputType
  refund: RefundInputType
}

input SurchargeInputType {
  taxLines: JSON!
  description: String!
  listPrice: Float!
  listPriceIncludesTax: Boolean!
  sku: String!
  order: OrderInputType!
  orderModification: OrderModificationInputType!
}

input ShippingLineInputType {
  adjustments: JSON!
  taxLines: JSON!
  shippingMethodId: Float!
  shippingMethod: ShippingMethodInputType!
  order: OrderInputType!
  listPrice: Float!
  listPriceIncludesTax: Boolean!
}

input ShippingMethodInputType {
  deletedAt: DateTime!
  code: String!
  name: String!
  description: String!
  shippingLines: [ShippingLineInputType!]!
  fulfillmentHandlerCode: String!
  channels: [ChannelInputType!]!
}

input PromotionInputType {
  deletedAt: DateTime!
  startsAt: DateTime!
  endsAt: DateTime!
  couponCode: String!
  perCustomerUsageLimit: Float!
  name: String!
  enabled: Boolean!
  channels: [ChannelInputType!]!
}

input StoreInputType {
  name: String!
  address: AdressInputType!
  manager: EmployeeInputType!
}

input EmployeeInputType {
  profile: PersonInputType!
  department: DepartmentInputType!
}

input DepartmentInputType {
  name: String!
  employees: [EmployeeInputType!]!
}

input EditCustomerGroupInput {
  name: String
  customers: [CustomerInputType!]
  customerGroupId: Float!
}

input CreatePersonInput {
  title: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  emailAddress: String!
  addresses: [AdressInputType!]
  companyName: String!
  taxNumber: String!
}

input EditPersonInput {
  title: String
  firstName: String
  lastName: String
  phoneNumber: String
  emailAddress: String
  addresses: [AdressInputType!]
  companyName: String
  taxNumber: String
  personId: Float!
}

input CreateFacetInput {
  name: String!
  isPrivate: Boolean!
  code: String!
}

input EditFacetInput {
  name: String
  isPrivate: Boolean
  code: String
  facetId: Float!
}

input CreateFacetValueInput {
  name: String!
  code: String!
  facetId: Float!
}

input EditFacetValueInput {
  name: String
  code: String
  facetId: Float!
  facetValueId: Float!
}

input CreateAccountInput {
  email: String!
  password: String!
  roleId: Float!
}

input LoginInput {
  email: String!
  password: String!
}

input EditProfileInput {
  email: String
  password: String
}

input VerifyEmailInput {
  code: String!
}

input CreateRoleInput {
  code: String!
  name: String!
  description: String!
}

input EditRoleInput {
  permissions: PermissionInputType
  code: String
  name: String
  description: String
  roleId: Float!
  channelId: Float!
}

input CreatePermissionInput {
  users: [AuthActions!]!
  order: [AuthActions!]!
  collection: [AuthActions!]!
  people: [AuthActions!]!
  role: [AuthActions!]!
  product: [AuthActions!]!
  roleId: Float!
}

input EditPermissionInput {
  users: [AuthActions!]
  order: [AuthActions!]
  collection: [AuthActions!]
  people: [AuthActions!]
  role: [AuthActions!]
  product: [AuthActions!]
  permissionId: Float!
}

input CreateProductInput {
  name: String!
  slug: String!
  description: String!
  enabled: Boolean!
  channels: [ChannelInputType!]
  channelId: Float!
  featuredAssetId: Float!
}

input EditProductInput {
  id: Float
  name: String
  slug: String
  description: String
  enabled: Boolean
  channels: [ChannelInputType!]
  productId: Float!
  featuredAssetId: Float!
}

input CreateProductAssetInput {
  assetId: Float!
  asset: AssetInputType!
  position: Float!
  productId: Float!
  product: ProductInputType!
}

input EditProductAssetInput {
  assetId: Float
  asset: AssetInputType
  position: Float
  productId: Float
  product: ProductInputType
  productAssetId: Float!
}

input CreateProductVariantAssetInput {
  assetId: Float!
  asset: AssetInputType!
  position: Float!
  productVariantId: Float!
  productVariant: ProductVariantInputType!
}

input EditProductVariantAssetInput {
  assetId: Float
  asset: AssetInputType
  position: Float
  productVariantId: Float
  productVariant: ProductVariantInputType
  productVariantAssetId: Float!
}

input CreateProductVariantPriceInput {
  price: Float!
  channelId: Float!
  variantId: Float!
}

input EditProductVariantPriceInput {
  price: Float
  channelId: Float
  productVariantPriceId: Float!
  variantId: Float!
}

input CreateProductVariantInput {
  barcode: Float!
  name: String!
  enabled: Boolean!
  listPrice: Float!
  listPriceIncludesTax: Boolean!
  currencyCode: CurrencyCode!
  product: ProductInputType!
  productId: Float!
  stockOnHand: Float!
  stockAllocated: Float!
  outOfStockThreshold: Float!
  useGlobalOutOfStockThreshold: Boolean!
  trackInventory: GlobalFlag!
  deletedAt: DateTime!
}

input EditProductVariantInput {
  barcode: Float
  name: String
  enabled: Boolean
  listPrice: Float
  listPriceIncludesTax: Boolean
  currencyCode: CurrencyCode
  featuredAsset: AssetInputType
  product: ProductInputType
  productId: Float
  stockOnHand: Float
  stockAllocated: Float
  outOfStockThreshold: Float
  useGlobalOutOfStockThreshold: Boolean
  trackInventory: GlobalFlag
  channels: [ChannelInputType!]
  deletedAt: DateTime
  productVariantId: Float!
}

input CreateStockAdjustmentInput {
  productVariant: ProductVariantInputType!
  quantity: Float!
  note: String!
  productVariantId: Float!
}

input EditStockAdjustmentInput {
  productVariant: ProductVariantInputType
  quantity: Float
  note: String
  productVariantId: Float!
  stockAdjustmentId: Float!
}

input CreateStoreInput {
  name: String!
  employeeId: Float!
}

input EditStoreInput {
  name: String
  employeeId: Float!
  storeId: Float!
}

input CreateStoreStockLevelInput {
  quantity: Float!
  storeId: Float!
}

input EditStoreStockLevelInput {
  quantity: Float
  storeStockLevelId: Float!
  storeId: Float!
  variantId: Float!
}

input CreateEmployeeInput {
  departmentId: Float!
  personId: Float!
}

input EditEmployeeInput {
  employeeId: Float!
  departmentId: Float!
}

input CreateDepartmentInput {
  name: String!
  employees: [EmployeeInputType!]!
}

input EditDepartmentInput {
  name: String
  employees: [EmployeeInputType!]
  departmentId: Float!
}

input CreateSupplierInput {
  personId: Float!
}

input EditSupplierInput {
  supplierId: Float!
}
